# app_saas.py
import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import random
import io
import time
from hashlib import sha256
import streamlit.components.v1 as components
from typing import Optional

# Thi·∫øt l·∫≠p giao di·ªán hi·ªán ƒë·∫°i, th√¢n thi·ªán v·ªõi URL linh ho·∫°t
st.set_page_config(
    page_title="·ª®ng d·ª•ng Th·ª±c ƒë∆°n Th√¥ng Minh (SaaS)",
    page_icon="üçé",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ƒë·ªÉ n√¢ng c·∫•p giao di·ªán v·ªõi Light Mode
st.markdown("""
    <style>
    body, .stApp {
        background-color: #ffffff !important;
    }
    .main {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .stButton>button {
        background-color: #007bff;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #0056b3;
    }
    .stNumberInput>input, .stRadio>label, .stTextInput>input {
        font-size: 16px;
        color: #333;
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }
    .stMarkdown {
        font-family: 'Arial', sans-serif;
        color: #333;
    }
    .stWarning {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 5px;
        padding: 10px;
        color: #856404;
    }
    .stInfo {
        background-color: #cce5ff;
        border: 1px solid #b8daff;
        border-radius: 5px;
        padding: 10px;
        color: #004085;
    }
    .stSuccess {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 10px;
        color: #155724;
    }
    .stDivider {
        border-color: #dee2e6 !important;
    }
    </style>
""", unsafe_allow_html=True)

# K·∫øt n·ªëi SQLite v·ªõi thread safety
conn = sqlite3.connect('user_data_saas.db', check_same_thread=False)
c = conn.cursor()

# ƒê·ªãnh nghƒ©a h√†m hash_password tr∆∞·ªõc c√°c h√†m kh√°c
def hash_password(password: str) -> str:
    return sha256(password.encode()).hexdigest()

# ƒê·ªãnh nghƒ©a c√°c h√†m CRUD tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói NameError
def read_user(username: str) -> Optional[tuple]:
    c.execute("SELECT * FROM users_auth WHERE username = ?", (username,))
    return c.fetchone()

def create_user(username: str, password: str) -> bool:
    try:
        hashed_password = hash_password(password)
        usage_time = None if username == "linh" else 180  # Admin c√≥ usage_time v√¥ h·∫°n (None)
        c.execute("INSERT INTO users_auth (username, password, login_time, usage_time, last_activity) VALUES (?, ?, 0, ?, 0)", (username, hashed_password, usage_time))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False

def update_user(username: str, password: Optional[str] = None, login_time: Optional[float] = None, 
                usage_time: Optional[float] = None, last_activity: Optional[float] = None) -> None:
    updates, values = [], []
    if password:
        updates.append("password = ?")
        values.append(hash_password(password))
    if login_time is not None:
        updates.append("login_time = ?")
        values.append(login_time)
    # Ch·ªâ c·∫≠p nh·∫≠t usage_time n·∫øu kh√¥ng ph·∫£i admin
    if usage_time is not None and username != "linh":
        updates.append("usage_time = ?")
        values.append(usage_time)
    if last_activity is not None:
        updates.append("last_activity = ?")
        values.append(last_activity)
    if updates:
        values.append(username)
        c.execute(f"UPDATE users_auth SET {', '.join(updates)} WHERE username = ?", values)
        conn.commit()

def delete_user(username: str) -> None:
    c.execute("DELETE FROM users_auth WHERE username = ?", (username,))
    c.execute("DELETE FROM users_data WHERE username = ?", (username,))
    conn.commit()

# T·ª± ƒë·ªông t·∫°o t√†i kho·∫£n admin n·∫øu ch∆∞a t·ªìn t·∫°i
def initialize_admin() -> None:
    admin_username = "linh"
    admin_password = "13021995"
    if not read_user(admin_username):
        create_user(admin_username, admin_password)

initialize_admin()

# T·∫°o c√°c b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
c.execute('''CREATE TABLE IF NOT EXISTS users_auth 
             (username TEXT PRIMARY KEY, password TEXT, login_time REAL, usage_time REAL, last_activity REAL)''')
c.execute('''CREATE TABLE IF NOT EXISTS users_data 
             (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, age INTEGER, height REAL, weight REAL, ideal_weight REAL, FOREIGN KEY (username) REFERENCES users_auth(username))''')
c.execute('''CREATE TABLE IF NOT EXISTS foods 
             (name TEXT, kcal REAL, protein REAL, carb REAL, fat REAL)''')
conn.commit()

# D·ªØ li·ªáu th·ª±c ph·∫©m m·∫´u ban ƒë·∫ßu
initial_foods = [
    ("C∆°m tr·∫Øng (100g)", 130, 2.7, 28, 0.3),
    ("·ª®c g√† (100g)", 165, 31, 0, 3.6),
    ("Chu·ªëi (1 qu·∫£, 120g)", 90, 1, 23, 0.3),
    ("S·ªØa t∆∞∆°i (200ml)", 120, 6, 9, 6),
    ("C∆°m rang (100g)", 130, 2.7, 28, 0.3),
    ("Heo (100g)", 165, 31, 0, 3.6),
    ("B√°nh m√¨ (100g)", 250, 8, 48, 3),
    ("Tr·ª©ng g√† (1 qu·∫£, 50g)", 70, 6, 0.5, 5),
    ("G·∫°o l·ª©t (100g)", 123, 2.5, 25, 1),
    ("C√° h·ªìi (100g)", 200, 22, 0, 13),
    ("H·∫°t √≥c ch√≥ (100g)", 654, 15, 13, 65),
    ("B∆° (100g)", 717, 0.9, 0.1, 81)
]
c.executemany("INSERT OR IGNORE INTO foods VALUES (?, ?, ?, ?, ?)", initial_foods)
conn.commit()

# H√†m ki·ªÉm tra ƒëƒÉng nh·∫≠p v·ªõi session management
def check_login(username: str, password: str) -> bool:
    user = read_user(username)
    if user and hash_password(password) == user[1]:  # user[1] l√† password
        current_time = time.time()
        usage_time = user[3]  # L·∫•y usage_time t·ª´ database
        if username != "linh":  # Ch·ªâ ki·ªÉm tra h·∫øt h·∫°n cho user, kh√¥ng cho admin
            if usage_time is not None and usage_time <= 0:
                st.error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng li√™n h·ªá admin qua email: example@email.com", icon="‚ùå")
                st.session_state['logged_in'] = False
                return False
            if user[2] and (current_time - user[2]) > (usage_time or 180):  # Ki·ªÉm tra h·∫øt h·∫°n cho user
                st.session_state['logged_in'] = False
                st.session_state['username'] = None
                st.session_state['is_admin'] = False
                st.session_state['remaining_time'] = None
                st.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", icon="‚ùå")
                return False
        st.session_state['logged_in'] = True
        st.session_state['username'] = username
        st.session_state['is_admin'] = (username == "linh")
        st.session_state['remaining_time'] = float('inf') if username == "linh" else (usage_time or 180)  # Admin c√≥ remaining_time v√¥ h·∫°n
        update_user(username, login_time=current_time, usage_time=None if username == "linh" else usage_time, last_activity=current_time)
        st.session_state['session_start'] = current_time  # L∆∞u th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu session
        return True
    return False

# H√†m ƒëƒÉng xu·∫•t v·ªõi session cleanup
def logout() -> None:
    if 'logged_in' in st.session_state and st.session_state['logged_in']:
        update_user(st.session_state['username'], login_time=0, last_activity=0, usage_time=st.session_state.get('remaining_time', 180) if st.session_state['username'] != "linh" else None)
        for key in ['logged_in', 'username', 'is_admin', 'remaining_time', 'session_start', 'page']:
            st.session_state.pop(key, None)
        st.success("ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!", icon="‚úÖ")
        st.rerun()

# H√†m t√≠nh to√°n BMI, c√¢n n·∫∑ng l√Ω t∆∞·ªüng
def calculate_bmi(height: float, weight: float) -> float:
    return weight / ((height / 100) ** 2)

def ideal_weight(height: float, age: int) -> float:
    return 20 if age < 18 else 22 if 18 <= age <= 65 else 24 * (height / 100) ** 2

def daily_calories_needed(current_weight: float, ideal_weight: float, days: int) -> float:
    max_weight_change_per_week = 1
    min_days_per_kg = {True: 7, False: 14}
    weight_diff = ideal_weight - current_weight
    is_increasing = weight_diff > 0
    if days < min_days_per_kg[is_increasing] * abs(weight_diff):
        min_days_needed = int(min_days_per_kg[is_increasing] * abs(weight_diff)) + 1
        st.warning(f"Kh√¥ng kh·∫£ thi! C·∫ßn {min_days_needed} ng√†y {'tƒÉng' if is_increasing else 'gi·∫£m'} {abs(weight_diff):.2f} kg ({'0.5-1' if is_increasing else '0.25-0.5'} kg/tu·∫ßn).", icon="‚ùå")
        return 0
    return weight_diff * 7700 / days if days > 0 else 0

# H√†m t·∫°o th·ª±c ƒë∆°n khoa h·ªçc
def generate_scientific_meal_options(foods_df: pd.DataFrame, target_kcal_per_day: float, days: int, is_increasing: bool) -> list:
    options, used_foods = [], set()
    min_cal, max_cal = 500, 2000
    for _ in range(3):
        foods, kcal = [], min(max_cal, max(min_cal, target_kcal_per_day)) if is_increasing else max(min_cal, target_kcal_per_day)
        while kcal > 0 and len(foods) < 6:
            available = foods_df[~foods_df['name'].isin(used_foods) & (foods_df['kcal'] <= kcal)]
            if available.empty:
                break
            food = available.sample(1).iloc[0]
            foods.append(food)
            used_foods.add(food['name'])
            kcal -= food['kcal']
        
        if not foods:
            continue

        totals = {k: sum(f[k] for f in foods) for k in ['kcal', 'protein', 'carb', 'fat']}
        if is_increasing and totals['kcal'] < target_kcal_per_day:
            while totals['kcal'] < min(target_kcal_per_day, max_cal) and len(foods) < 8:
                available = foods_df[~foods_df['name'].isin(used_foods) & (foods_df['kcal'] <= min(target_kcal_per_day, max_cal) - totals['kcal'])]
                if available.empty:
                    break
                food = available.sample(1).iloc[0]
                foods.append(food)
                used_foods.add(food['name'])
                for k in ['kcal', 'protein', 'carb', 'fat']:
                    totals[k] += food[k]
        elif not is_increasing and totals['kcal'] > target_kcal_per_day:
            foods.sort(key=lambda x: x['kcal'], reverse=True)
            while totals['kcal'] > target_kcal_per_day and len(foods) > 1 and totals['kcal'] > min_cal:
                food = foods.pop()
                used_foods.remove(food['name'])
                for k in ['kcal', 'protein', 'carb', 'fat']:
                    totals[k] -= food[k]

        options.append({'foods': pd.DataFrame(foods), **{f'total_{k}': v for k, v in totals.items()}})
    used_foods.clear()
    return options

# H√†m g·ª£i √Ω v·∫≠n ƒë·ªông
def suggest_exercise(calories_to_burn: float) -> list:
    return [f"- {e['name']}: {h * 60:.1f} ph√∫t (~{h:.2f} gi·ªù) ƒë·ªÉ ƒë·ªët {calories_to_burn:.0f} kcal, KPI: {e['kpi']}" 
            for e in [{"name": "Ch·∫°y b·ªô", "kcal_per_hour": 600, "kpi": "5 km nhanh"}, 
                      {"name": "ƒê·∫°p xe", "kcal_per_hour": 400, "kpi": "10 km trung b√¨nh"}, 
                      {"name": "T·∫≠p gym", "kcal_per_hour": 300, "kpi": "45 ph√∫t n·∫∑ng"}, 
                      {"name": "B∆°i l·ªôi", "kcal_per_hour": 500, "kpi": "1 km trung b√¨nh"}] 
            for h in [(calories_to_burn / e['kcal_per_hour'])]] if calories_to_burn > 0 else []

# H√†m t·∫°o file t·∫£i xu·ªëng (s·ª≠a l·ªói f-string)
def create_download_file(plan_markdown: str, user_info: dict, format: str = "md") -> tuple[str, str]:
    # S·ª≠ d·ª•ng chu·ªói th√¥ng th∆∞·ªùng thay v√¨ f-string ƒë·ªÉ tr√°nh l·ªói backslash
    intro_lines = [
        "**Th√¥ng tin ng∆∞·ªùi d√πng:**",
        "- Tu·ªïi: " + str(user_info['age']),
        "- Chi·ªÅu cao: " + str(user_info['height']) + " cm",
        "- C√¢n n·∫∑ng: " + str(user_info['weight']) + " kg",
        "- C√¢n n·∫∑ng l√Ω t∆∞·ªüng: " + str(user_info['ideal_weight']) + " kg",
        "- S·ªë ng√†y: " + str(user_info['days']),
        "- M·ª•c ti√™u: " + ('TƒÉng' if user_info['extra_calories'] > 0 else 'Gi·∫£m' if user_info['extra_calories'] < 0 else 'Duy tr√¨') + " c√¢n",
        "- Calo " + ('th√™m' if user_info['extra_calories'] > 0 else 'gi·∫£m' if user_info['extra_calories'] < 0 else 'duy tr√¨') + ": " + str(abs(user_info['extra_calories'])) + " kcal/ng√†y"
    ]
    intro = "\n".join(intro_lines) + "\n\n"

    if format == "md":
        content = "# K·∫ø ho·∫°ch ƒÉn u·ªëng th√¥ng minh\n\n" + intro + plan_markdown
        filename = "meal_plan.md"
    else:  # txt
        content = "K·∫ø ho·∫°ch ƒÉn u·ªëng th√¥ng minh\n\n" + intro.replace("**", "").replace("\n\n", "\n") + plan_markdown.replace("#", "").replace("---", "\n").replace("\n\n", "\n")
        filename = "meal_plan.txt"
    return content, filename

# H√†m qu·∫£n l√Ω URL v√† th·ªùi gian realtime
def update_url_and_time(username: str, is_admin: bool) -> None:
    st.session_state['page'] = f"/{'admin' if is_admin else 'user'}/{username}"
    current_time = time.time()
    user = read_user(username)
    login_time = user[2] if user else 0
    usage_time = user[3]  # L·∫•y gi√° tr·ªã th·ª±c t·∫ø t·ª´ database
    remaining = float('inf') if username == "linh" else max(0, (usage_time or 180) - (current_time - login_time)) if login_time else (usage_time or 180)
    st.session_state['remaining_time'] = remaining
    components.html(f"""
        <script>
            function updateTimer() {{
                let remaining = {remaining if remaining != float('inf') else 'Infinity'};
                if (remaining > 0 && remaining !== Infinity) {{
                    document.getElementById('timer').innerText = `Th·ªùi gian c√≤n l·∫°i: ${Math.max(0, remaining.toFixed(0))} gi√¢y`;
                    remaining -= 1;
                    setTimeout(updateTimer, 1000);
                }} else if (remaining === Infinity) {{
                    document.getElementById('timer').innerText = "Th·ªùi gian s·ª≠ d·ª•ng: V√¥ h·∫°n (Admin)";
                }} else {{
                    document.getElementById('timer').innerText = "H·∫øt th·ªùi gian s·ª≠ d·ª•ng!";
                    window.location.href = '/main';
                }}
            }}
            window.history.pushState("", "", "{st.session_state['page']}");
            updateTimer();
        </script>
        <div id="timer"></div>
    """, height=30)

# Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v·ªõi session persistence
def initialize_session() -> None:
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False
        st.session_state['username'] = None
        st.session_state['is_admin'] = False
        st.session_state['page'] = "/main"
        st.session_state['remaining_time'] = None
        st.session_state['session_start'] = None

initialize_session()

# X√°c th·ª±c tr·∫°ng th√°i session khi refresh
if st.session_state['page'] != "/main" and st.session_state['logged_in']:
    username = st.session_state['username']
    user = read_user(username)
    if not user or (username != "linh" and user[2] and (time.time() - user[2]) > (user[3] or 180)):
        logout()
    else:
        st.session_state['is_admin'] = (username == "linh")
        update_url_and_time(username, st.session_state['is_admin'])

# Trang ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω
if st.session_state['page'] == "/main" or not st.session_state['logged_in']:
    st.title("ƒêƒÉng nh·∫≠p/ƒêƒÉng k√Ω - ·ª®ng d·ª•ng Th·ª±c ƒë∆°n Th√¥ng Minh (SaaS) üçé")

    tab1, tab2 = st.tabs(["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"])

    with tab1:
        st.subheader("ƒêƒÉng nh·∫≠p", divider="rainbow")
        username = st.text_input("Username", key="login_username")
        password = st.text_input("Password", type="password", key="login_password")
        
        if st.button("ƒêƒÉng nh·∫≠p", type="primary"):
            if username == "linh" and password == "13021995":
                st.session_state['logged_in'] = True
                st.session_state['username'] = username
                st.session_state['is_admin'] = True
                update_url_and_time(username, True)
                st.rerun()
            elif check_login(username, password):
                if read_user(username)[3] <= 0:
                    st.error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng li√™n h·ªá admin qua email: example@email.com", icon="‚ùå")
                    st.session_state['logged_in'] = False
                else:
                    st.session_state['logged_in'] = True
                    st.session_state['is_admin'] = False
                    update_url_and_time(username, False)
                    st.rerun()
            else:
                st.error("Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin qua email: example@email.com", icon="‚ùå")

    with tab2:
        st.subheader("ƒêƒÉng k√Ω", divider="rainbow")
        new_username = st.text_input("Username m·ªõi", key="register_username")
        new_password = st.text_input("Password m·ªõi", type="password", key="register_password")
        
        if st.button("ƒêƒÉng k√Ω", type="primary"):
            if create_user(new_username, new_password):
                st.session_state['logged_in'] = False  # Y√™u c·∫ßu ƒëƒÉng nh·∫≠p sau ƒëƒÉng k√Ω
            else:
                st.error("Username ƒë√£ t·ªìn t·∫°i. Vui l√≤ng th·ª≠ l·∫°i.", icon="‚ùå")

else:
    username = st.session_state['username']
    is_admin = st.session_state['is_admin']

    # Sidebar v·ªõi ƒë·ªìng h·ªì th·ªùi gian realtime
    with st.sidebar:
        st.header(f"Ch√†o {username}")
        if st.button("ƒêƒÉng xu·∫•t", key="logout"):
            logout()
        if is_admin:
            st.write("Qu·∫£n l√Ω h·ªá th·ªëng")
        else:
            update_url_and_time(username, is_admin)  # C·∫≠p nh·∫≠t URL v√† hi·ªÉn th·ªã timer realtime

    if is_admin:
        # Dashboard admin v·ªõi CRUD ƒë·∫ßy ƒë·ªß
        st.title("Dashboard Qu·∫£n l√Ω Ng∆∞·ªùi d√πng", help="Qu·∫£n l√Ω to√†n di·ªán ng∆∞·ªùi d√πng v√† th·ªùi gian s·ª≠ d·ª•ng")
        st.subheader("Danh s√°ch ng∆∞·ªùi d√πng", divider="rainbow")

        # L·∫•y v√† hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
        c.execute("SELECT username, login_time, usage_time, last_activity FROM users_auth")
        users = c.fetchall()
        user_df = pd.DataFrame(users, columns=['Username', 'Login Time', 'Usage Time', 'Last Activity'])
        user_df['Login Time'] = pd.to_datetime(user_df['Login Time'], unit='s', errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')
        user_df['Last Activity'] = pd.to_datetime(user_df['Last Activity'], unit='s', errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')
        user_df['Usage Time'] = user_df['Usage Time'].apply(lambda x: 'V√¥ h·∫°n' if pd.isna(x) else x).astype(str)  # Hi·ªÉn th·ªã "V√¥ h·∫°n" cho admin
        user_df['Remaining Time'] = user_df.apply(
            lambda row: 'V√¥ h·∫°n' if row['Username'] == "linh" else 
            max(0, (float('inf') if pd.isna(row['Usage Time']) else row['Usage Time']) - 
                (time.time() - (row['Login Time'].astype(float) if pd.notna(row['Login Time']) and isinstance(row['Login Time'], (int, float)) else 0))) 
            if pd.notna(row['Login Time']) and (float('inf') if pd.isna(row['Usage Time']) else row['Usage Time']) > 0 else 0, axis=1)

        st.dataframe(user_df, hide_index=True)

        # CRUD Operations
        st.subheader("Qu·∫£n l√Ω ng∆∞·ªùi d√πng", divider="rainbow")
        action = st.selectbox("Ch·ªçn h√†nh ƒë·ªông", ["Th√™m", "S·ª≠a", "X√≥a", "Xem"], key="crud_action")

        if action == "Th√™m":
            new_username = st.text_input("Username m·ªõi", key="new_username")
            new_password = st.text_input("Password m·ªõi", type="password", key="new_password")
            new_usage_time = st.number_input("Th·ªùi gian s·ª≠ d·ª•ng (gi√¢y)", min_value=60, max_value=86400, value=180, key="new_usage_time")
            if st.button("Th√™m ng∆∞·ªùi d√πng", key="add_user"):
                if create_user(new_username, new_password):
                    update_user(new_username, usage_time=None if new_username == "linh" else new_usage_time, login_time=0, last_activity=0)
                    st.success(f"ƒê√£ th√™m ng∆∞·ªùi d√πng {new_username} v·ªõi th·ªùi gian {'V√¥ h·∫°n' if new_username == 'linh' else new_usage_time} gi√¢y!", icon="‚úÖ")

        elif action == "S·ª≠a":
            selected_user = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng", options=user_df['Username'].tolist(), key="edit_user")
            if selected_user:
                new_password = st.text_input("Password m·ªõi (r·ªóng n·∫øu kh√¥ng ƒë·ªïi)", type="password", key="edit_password")
                new_usage_time = st.number_input("Th·ªùi gian s·ª≠ d·ª•ng (gi√¢y)", min_value=60, max_value=86400, 
                                                value=float('inf') if selected_user == "linh" else int(user_df[user_df['Username'] == selected_user]['Usage Time'].iloc[0]), 
                                                key="edit_usage_time") if selected_user != "linh" else st.write("Admin c√≥ th·ªùi gian s·ª≠ d·ª•ng v√¥ h·∫°n, kh√¥ng th·ªÉ s·ª≠a.")
                if st.button("C·∫≠p nh·∫≠t", key="update_user"):
                    updates = {}
                    if new_password:
                        updates['password'] = new_password
                    updates['usage_time'] = None if selected_user == "linh" else (new_usage_time if selected_user != "linh" else user_df[user_df['Username'] == selected_user]['Usage Time'].iloc[0])
                    updates['login_time'] = 0  # Reset login time ƒë·ªÉ remaining time b·∫Øt ƒë·∫ßu m·ªõi
                    updates['last_activity'] = 0
                    update_user(selected_user, **updates)
                    st.success(f"ƒê√£ c·∫≠p nh·∫≠t {selected_user} v·ªõi th·ªùi gian {'V√¥ h·∫°n' if selected_user == 'linh' else new_usage_time} gi√¢y!", icon="‚úÖ")

        elif action == "X√≥a":
            selected_user = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a", options=user_df['Username'].tolist(), key="delete_user")
            if selected_user and st.button("X√≥a ng∆∞·ªùi d√πng", key="delete_user_confirm"):
                if selected_user == "linh":
                    st.error("Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin 'linh'.", icon="‚ùå")
                else:
                    delete_user(selected_user)
                    st.success(f"ƒê√£ x√≥a {selected_user}!", icon="‚úÖ")

        elif action == "Xem":
            selected_user = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ xem", options=user_df['Username'].tolist(), key="view_user")
            if selected_user:
                c.execute("SELECT age, height, weight, ideal_weight FROM users_data WHERE username = ?", (selected_user,))
                user_data = c.fetchone()
                if user_data:
                    age, height, weight, ideal_weight = user_data
                    st.subheader(f"Th√¥ng tin {selected_user}", divider="rainbow")
                    st.write(f"- Tu·ªïi: {age}")
                    st.write(f"- Chi·ªÅu cao: {height:.2f} cm")
                    st.write(f"- C√¢n n·∫∑ng: {weight:.2f} kg")
                    st.write(f"- C√¢n n·∫∑ng l√Ω t∆∞·ªüng: {ideal_weight:.2f} kg")
                else:
                    st.warning("Ng∆∞·ªùi d√πng ch∆∞a c√≥ d·ªØ li·ªáu.", icon="‚ö†Ô∏è")

    else:
        # Trang ng∆∞·ªùi d√πng, ki·ªÉm tra th·ªùi gian s·ª≠ d·ª•ng realtime
        c.execute("SELECT usage_time, login_time, last_activity FROM users_auth WHERE username = ?", (username,))
        user_data = c.fetchone()
        if not user_data or user_data[2] <= 0:  # Ki·ªÉm tra usage_time ƒë√£ h·∫øt h·∫°n
            st.error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng li√™n h·ªá admin qua email: example@email.com", icon="‚ùå")
            logout()
            st.rerun()
        usage_time, login_time, _ = user_data
        current_time = time.time()
        remaining_time = max(0, (usage_time or 180) - (current_time - (login_time or current_time)))

        if remaining_time <= 0:
            st.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n (3 ph√∫t). Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c li√™n h·ªá admin qua email: example@email.com", icon="‚ùå")
            logout()
            st.rerun()
        else:
            st.session_state['remaining_time'] = remaining_time
            st.title(f"Ch√†o {username} - ·ª®ng d·ª•ng Th·ª±c ƒë∆°n Th√¥ng Minh üçé", help="T·∫°o k·∫ø ho·∫°ch ƒÉn u·ªëng khoa h·ªçc.")
            
            # Import CSV
            st.subheader("Import th·ª±c ph·∫©m t·ª´ CSV", divider="rainbow")
            uploaded_file = st.file_uploader("T·∫£i file CSV", type=['csv'], help="C·ªôt: name, kcal, protein, carb, fat")
            if uploaded_file:
                import_csv(uploaded_file)

            # Nh·∫≠p th√¥ng tin ng∆∞·ªùi d√πng
            st.header("Th√¥ng tin c√° nh√¢n", divider="rainbow")
            col1, col2, col3 = st.columns(3)
            with col1:
                age = st.number_input("Tu·ªïi", 1, 120, 30, key="user_age")
            with col2:
                height = st.number_input("Chi·ªÅu cao (cm)", 50.0, 250.0, 167.0, key="user_height")
            with col3:
                weight = st.number_input("C√¢n n·∫∑ng (kg)", 20.0, 200.0, 64.0, key="user_weight")

            if st.button("T√≠nh to√°n & l∆∞u", type="primary"):
                bmi = calculate_bmi(height, weight)
                ideal_w = ideal_weight(height, age)
                st.session_state['bmi'] = bmi
                st.session_state['ideal_w'] = ideal_w
                weight_diff = ideal_w - weight
                if weight_diff > 0:
                    min_days = max(1, int(7 * weight_diff))
                else:
                    min_days = max(1, int(14 * abs(weight_diff)))
                st.session_state['days'] = min_days
                st.session_state['weight_diff'] = weight_diff

                c.execute("INSERT OR REPLACE INTO users_data (username, age, height, weight, ideal_weight) VALUES (?, ?, ?, ?, ?)",
                          (username, age, height, weight, ideal_w))
                conn.commit()

                st.success(f"BMI: {bmi:.2f}", icon="üìä")
                st.success(f"C√¢n n·∫∑ng l√Ω t∆∞·ªüng: {ideal_w:.2f} kg", icon="‚öñÔ∏è")

            # K·∫ø ho·∫°ch tƒÉng/gi·∫£m c√¢n
            st.header("K·∫ø ho·∫°ch tƒÉng/gi·∫£m c√¢n", divider="rainbow")
            days = st.number_input("S·ªë ng√†y ƒë·∫°t c√¢n n·∫∑ng l√Ω t∆∞·ªüng", 1, 365, st.session_state.get('days', 1))

            if 'ideal_w' in st.session_state and 'weight_diff' in st.session_state:
                extra_cal = daily_calories_needed(weight, st.session_state['ideal_w'], days)
                if extra_cal == 0:
                    st.session_state['extra_calories'] = None
                else:
                    st.session_state['extra_calories'] = extra_cal
                    if extra_cal > 0:
                        st.info(f"Th√™m {extra_cal:.0f} kcal/ng√†y ƒë·ªÉ ƒë·∫°t {st.session_state['ideal_w']:.2f} kg trong {days} ng√†y", icon="‚ûï")
                    elif extra_cal < 0:
                        st.info(f"Gi·∫£m {abs(extra_cal):.0f} kcal/ng√†y ƒë·ªÉ ƒë·∫°t {st.session_state['ideal_w']:.2f} kg trong {days} ng√†y", icon="‚ûñ")
                        st.write(f"""
                        **Gi·∫£i th√≠ch:** Gi·∫£m c√¢n l√†nh m·∫°nh (0.25-0.5 kg/tu·∫ßn, 14-28 ng√†y/kg). 
                        M·ª•c ti√™u {abs(st.session_state['weight_diff']):.2f} kg c·∫ßn {int(14 * abs(st.session_state['weight_diff']))}-{int(28 * abs(st.session_state['weight_diff']))} ng√†y. 
                        K·∫ø ho·∫°ch {days} ng√†y h·ª£p l√Ω, k·∫øt h·ª£p ƒÉn v√† v·∫≠n ƒë·ªông {abs(extra_cal):.0f} kcal/ng√†y. 
                        Tr√°nh <500 kcal/ng√†y ho·∫∑c >1,000 kcal/ng√†y ƒë·ªët ƒë·ªÉ tr√°nh stress, m·ªát m·ªèi, m·∫•t c∆°.
                        """)
                    else:
                        st.success("C√¢n n·∫∑ng hi·ªán t·∫°i l√Ω t∆∞·ªüng!", icon="‚úÖ")

                show_plan_disabled = 'extra_calories' not in st.session_state or st.session_state['extra_calories'] is None
                if st.button("Hi·ªÉn th·ªã k·∫ø ho·∫°ch", disabled=show_plan_disabled, type="primary"):
                    if not st.session_state['extra_calories']:
                        st.warning("K·∫ø ho·∫°ch kh√¥ng kh·∫£ thi. Ch·ªçn s·ªë ng√†y h·ª£p l√Ω.", icon="‚ùå")
                    else:
                        target_cal = abs(st.session_state['extra_calories'])
                        is_increasing = st.session_state['extra_calories'] > 0
                        foods_df = pd.read_sql_query("SELECT * FROM foods", conn)

                        st.subheader("K·∫ø ho·∫°ch t·ª´ng ng√†y", divider="rainbow")
                        plan_markdown = ""
                        for day in range(days):
                            date = datetime(2025, 2, 28) + timedelta(days=day)
                            plan_markdown += f"## {date.strftime('%Y-%m-%d')} (Ng√†y {day + 1})\nNh√≥m th·ª±c ph·∫©m:\n"
                            options = generate_scientific_meal_options(foods_df, target_cal, days, is_increasing)
                            for i, option in enumerate(options, 1):
                                plan_markdown += f"C√°ch {i}:\n"
                                for _, row in option['foods'].iterrows():
                                    plan_markdown += f"- {row['name']}: {row['kcal']} kcal, {row['protein']}g protein, {row['carb']}g carb, {row['fat']}g fat\n"
                                plan_markdown += f"**T·ªïng ng√†y {day + 1} (C√°ch {i})**: {option['total_kcal']:.0f} kcal, {option['total_protein']:.1f}g protein, {option['total_carb']:.1f}g carb, {option['total_fat']:.1f}g fat\n\n"
                            if not is_increasing:
                                for i, option in enumerate(options, 1):
                                    tdee = 1900
                                    burn = option['total_kcal'] - (tdee - target_cal)
                                    if burn > 0:
                                        plan_markdown += f"**V·∫≠n ƒë·ªông C√°ch {i} (ƒë·ªët {burn:.0f} kcal):**\n" + "\n".join(suggest_exercise(burn))
                                    elif burn < 0:
                                        plan_markdown += f"**B·ªï sung C√°ch {i} (c·∫ßn th√™m {-burn:.0f} kcal):**\n- Gi·ªØ th·ª±c ƒë∆°n, v·∫≠n ƒë·ªông nh·∫π (200-400 kcal/ng√†y).\n"
                            plan_markdown += "---\n"

                        st.session_state['plan_markdown'] = plan_markdown
                        st.markdown(plan_markdown)

                        col1, col2 = st.columns(2)
                        with col1:
                            st.button("Hi·ªÉn th·ªã k·∫ø ho·∫°ch", disabled=show_plan_disabled, key="show_plan", type="primary")
                        with col2:
                            if 'plan_markdown' in st.session_state:
                                fmt = st.radio("ƒê·ªãnh d·∫°ng t·∫£i xu·ªëng", ["Markdown (.md)", "Text (.txt)"], horizontal=True, key="download_format")
                                content, fname = create_download_file(plan_markdown, {
                                    'age': age, 'height': height, 'weight': weight, 'ideal_weight': st.session_state['ideal_w'],
                                    'days': days, 'extra_calories': st.session_state['extra_calories']
                                }, "md" if fmt == "Markdown (.md)" else "txt")
                                st.download_button("T·∫£i k·∫ø ho·∫°ch", content.encode('utf-8'), fname, "text/plain" if fmt == "Text (.txt)" else "text/markdown", type="secondary")

                        if is_increasing:
                            st.info("**G·ª£i √Ω:** Th·ª±c ƒë∆°n tƒÉng c√¢n, ch·ªçn theo s·ªü th√≠ch!", icon="üí™")
                            if any(o['total_kcal'] < target_cal for o in options):
                                st.warning(f"Kh√¥ng ƒë·∫°t {target_cal:.0f} kcal/ng√†y. B·ªï sung th·ª±c ph·∫©m!", icon="‚ùå")
                        elif not is_increasing:
                            st.info(f"Gi·∫£m {abs(st.session_state['extra_calories']):.0f} kcal/ng√†y ƒë·ªÉ ƒë·∫°t {st.session_state['ideal_w']:.2f} kg trong {days} ng√†y", icon="‚ûñ")
                            st.info("**G·ª£i √Ω:** K·∫øt h·ª£p th·ª±c ƒë∆°n, v·∫≠n ƒë·ªông ƒë·ªÉ gi·∫£m an to√†n. Xem g·ª£i √Ω v·∫≠n ƒë·ªông.", icon="üèÉ")
                        else:
                            st.success("C√¢n n·∫∑ng hi·ªán t·∫°i l√Ω t∆∞·ªüng!", icon="‚úÖ")

            # Hi·ªÉn th·ªã ƒë·ªãnh d·∫°ng CSV m·∫´u
            st.subheader("ƒê·ªãnh d·∫°ng CSV m·∫´u", divider="rainbow")
            st.write("""
            | name              | kcal  | protein | carb  | fat  |
            |-------------------|-------|---------|-------|------|
            | C∆°m tr·∫Øng (100g)  | 130   | 2.7     | 28    | 0.3  |
            | ·ª®c g√† (100g)      | 165   | 31      | 0     | 3.6  |
            L∆∞u file `.csv`, t·∫£i l√™n qua n√∫t 'T·∫£i l√™n file CSV'.
            """)

conn.close()